version: '3'

services:
  zoo1:
    image: confluentinc/cp-zookeeper:latest
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    ports:
      - "19092:19092"     # internal / kafka clients
      - "9092:9092"       # external
      - "29092:29092"     # optional docker internal
      - "10999:10999"     # JMX
      - "7071:7071"       # JMX Prometheus exporter
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181

      # Kafka listeners
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      # Increase the JVM heap size to give Kafka more breathing room
      KAFKA_HEAP_OPTS: "-Xms2G -Xmx2G"

      # JMX + metrics
      KAFKA_JMX_PORT: 10999
      KAFKA_JMX_HOSTNAME: 0.0.0.0
      KAFKA_JMX_OPTS: >
        -javaagent:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.18.0.jar=7071:/etc/jmx/kafka-config.yml
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Dcom.sun.management.jmxremote.port=10999
        -Dcom.sun.management.jmxremote.rmi.port=10999
        -Djava.rmi.server.hostname=kafka1

      # Kafka config
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MS: 3600000
      KAFKA_LOG_SEGMENT_MS: 600000

    volumes:
      - ./jmx/kafka-config.yml:/etc/jmx/kafka-config.yml
    depends_on:
      - zoo1
    deploy:
      resources:
        limits:
          memory: 2G

  # OpenTelemetry Collector
  kafka-otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: kafka-otel-collector
    ports:
      - "9464:9464"  # Prometheus scrape port
      - "4317:4317" # OTLP gRPC endpoint
      - "4318:4318" # OTLP HTTP endpoint
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    command: [ "--config", "/etc/otel-collector-config.yml" ]

  # Prometheus
  kafka-prometheus:
    image: prom/prometheus:latest
    container_name: kafka-prometheus
    ports:
      - "9999:9090"  # Prometheus UI
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - kafka1
      - kafka-otel-collector
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  # Grafana
  kafka-grafana:
    image: grafana/grafana:latest
    container_name: kafka-grafana
    ports:
      - "3000:3000"  # Grafana UI
    depends_on:
      - kafka-prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9000:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./kui/kui-config.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
       - kafka1
       - zoo1

volumes:
  grafana-data:
